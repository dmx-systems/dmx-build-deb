stages:
  - build
  - test
  - deploy

variables:
    # target distribution
    # TARGET="$(lsb_release -sc)"
    TARGET: "xenial"

build:
  only:
    refs:
      - master
  tags:
    - deb
  stage: build
  script:
    - pwd
    - DMX='dmx'
    - ZIPFILE='dmx-latest.zip'
    - DEBFULLNAME='GitLab Runner (DMX CI)'
    - DEBEMAIL='Gitlab Runner (DMX CI) <gitlab.runner@dmx.systems>'
    - echo "Starting job ${CI_JOB_ID} in pipeline ${CI_PIPELINE_ID}"
    - wget -q https://download.dmx.systems/ci/${ZIPFILE}
    - unzip -q ${ZIPFILE}
    - VERSION="$( ls -d dmx-* | grep -v ${ZIPFILE} | cut -d'-' -f2- )"
    - echo "VERSION=${VERSION}"
    - rm -rf ${DMX}-${VERSION}/bundle/org.apache.felix.gogo.*
    - mkdir -p bin/bin bin/bundle bin/bundle-deploy bin/bundle-available
    - wget -q https://download.dmx.systems/ci/dmx-tableview-command/dmx-tableview-command-latest.jar -P bin/bundle-available
    - wget -q https://download.dmx.systems/ci/dmx-tableview/dmx-tableview-latest.jar -P bin/bundle-available
    - mv ${DMX}-${VERSION}/bin/* bin/bin/
    - mv ${DMX}-${VERSION}/bundle/* bin/bundle/
    - mv ${DMX}-${VERSION}/bundle-deploy/* bin/bundle-deploy/
    - mv ${DMX}-${VERSION}/*.txt ./
    - mkdir etc/dmx
    - CONFIG=$(<${DMX}-${VERSION}/conf/config.properties)
    - CONFIG=${CONFIG/dmx.security.anonymous_read_allowed = ALL/dmx.security.anonymous_read_allowed = NONE}
    - CONFIG=${CONFIG/dmx.security.initial_admin_password = /dmx.security.initial_admin_password = YOUR_SECRET_PASSWORD_HERE}
    - CONFIG=${CONFIG/dmx.filerepo.path = \//dmx.filerepo.path = \/var\/lib\/dmx\/dmx-filedir}
    - CONFIG=${CONFIG/dmx.filerepo.per_workspace = false/dmx.filerepo.per_workspace = true}
    - CONFIG=${CONFIG/felix.fileinstall.dir = bundle-deploy/felix.fileinstall.dir = \/usr\/share\/dmx\/bundle-deploy}
    - CONFIG=${CONFIG/dmx.database.path = dmx-db/dmx.database.path = \/var\/lib\/dmx\/dmx-db}
    - CONFIG=${CONFIG/java.util.logging.config.file = conf\/logging.properties/java.util.logging.config.file = \/etc\/dmx\/logging.properties}
    - CONFIG=${CONFIG/org.osgi.framework.storage = bundle-cache/org.osgi.framework.storage = \/var\/cache\/dmx\/bundle-cache}
    - echo "${CONFIG}" >etc/dmx/config.properties
    - LOGGING=$(<${DMX}-${VERSION}/conf/logging.properties)
    - LOGGING=${LOGGING/handlers=java.util.logging.ConsoleHandler/\# handlers=java.util.logging.ConsoleHandler}
    - LOGGING=${LOGGING/java.util.logging.ConsoleHandler.level=ALL/\# java.util.logging.ConsoleHandler.level=ALL}
    - LOGGING=${LOGGING/\# handlers=java.util.logging.FileHandler/handlers=java.util.logging.FileHandler}
    # The next line should be removed once jri updated the source from deepamehta.log to dmx.log 
    - LOGGING=${LOGGING/java.util.logging.FileHandler.pattern=deepamehta.log/java.util.logging.FileHandler.pattern=\/var\/log\/dmx\/dmx.log}
    - LOGGING=${LOGGING/java.util.logging.FileHandler.pattern=dmx.log/java.util.logging.FileHandler.pattern=\/var\/log\/dmx\/dmx.log}
    - echo "${LOGGING}" >etc/dmx/logging.properties
    - COPYRIGHT=$(<debian/copyright)
    - echo "${COPYRIGHT/@@NUNC@@/$(date -R)}" >debian/copyright
    - PREINST="$(<debian/preinst)"
    - PREINST=${PREINST/DMVERSION=\'@@VERSION@@\'/DMVERSION=\'${VERSION}\'}
    - echo "${PREINST}" >debian/preinst
    - pwd
    - dch --controlmaint --create --package "dmx" --newversion ${VERSION} --empty
    - dch --controlmaint -v ${VERSION} "A Debian Package for DMX - The Context Machine"
    - dch --controlmaint -v ${VERSION} "DMX is the successor of JÃ¶rg Richter's <jri@deepamehta.de> DeepaMehta project."
    - dch --controlmaint -v ${VERSION} "Thanks to Silke <silke@silkemeyer.net> for the initial work on the debian package."
    - dch --controlmaint -r --distribution "${TARGET}" ignored 
    - LASTCOMMIT="$( git rev-parse HEAD )"
    - git add debian/changelog
    - 'git commit -m"DMX debian package build from ${DMX}-${VERSION} - Build Pipeline ${CI_PIPELINE_ID}" -m"Binaries from https://download.dmx.systems/ci/dmx-latest.zip" -m"Thanks: GitLab Team for providing great CI infrastructure!"'
    - git log -1
    - gbp dch --distribution "${TARGET}" --ignore-branch --new-version "${VERSION}-${CI_PIPELINE_ID}" --commit --since=${LASTCOMMIT} --release --spawn-editor=never --full --meta
    - dpkg-buildpackage -A -us --force-sign -k'671B7719' 

test:
  only:
    refs:
      - master
  tags:
    - deb
  stage: test
  script:
    - COMMIT_VERSION="$( cat .git/COMMIT_EDITMSG | cut -d' ' -f4 )"
    - cat ../dmx_${COMMIT_VERSION}_all.changes
    - echo "Running test - lintian -i -I --show-overrides ../dmx_${COMMIT_VERSION}_all.changes"
    - lintian -i -I --show-overrides ../dmx_${COMMIT_VERSION}_all.changes

deploy:
  only:
    refs:
      - master
  tags:
    - deb
  stage: deploy
  script:
    - REPODIR='/var/www/download.dmx.systems/repos'  
    - pwd
    - dput local ../dmx_*-${CI_PIPELINE_ID}_*.changes
    - sleep 1
    - mini-dinstall --batch
    - sleep 1
    - debc ${REPODIR}/ubuntu/${TARGET}/dmx_*-${CI_PIPELINE_ID}_all.changes
    ### trigger pipeline to re-deploy docker image for dmx demo
    - MY_JOB_TOKEN="$(</home/gitlab-runner/.after-deb-repo.token)"
    - TRIGGER="$(curl --silent --write-out '%{http_code}' --output /dev/null --request POST --form token="${MY_JOB_TOKEN}" --form ref=master https://git.dmx.systems/api/v4/projects/17/trigger/pipeline)"
    - echo "${TRIGGER}"
    - if [ ${TRIGGER} -ne 201 ]; then echo "Failed to trigger subsequent project."; exit 1; fi
