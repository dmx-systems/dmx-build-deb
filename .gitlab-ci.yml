# The master branch builds the latest development snapshots 
# of the dmx core modules and the curated dmx plugins.  

stages:
  - build
  - test
  - deploy

variables:
  # target distribution
  # TARGET="$(lsb_release -sc)"
  TARGET: "xenial"
  DMX: 'dmx'                     # [ dmx | deepamehta ]
  PACKAGENAME: "${DMX}-latest"   # [ dmx | dmx-latest ]

build:
  only:
    refs:
      - master
  tags:
    - deb
  stage: build
#  variables:
#    PLUGINS: 'dmx-tableview dmx-geomaps dmx-mobile dmx-dita dmx-ldap'
#    WEBCGI: 'https://download.dmx.systems/cgi-bin/v1/latest-version.cgi?'
#    WEBDIR: 'https://download.dmx.systems/ci'
#    ZIPFILE: 'dmx-latest.zip'
#    DEBFULLNAME: 'GitLab Runner (DMX CI)'
#    DEBEMAIL: 'Gitlab Runner (DMX CI) <gitlab.runner@dmx.systems>'
  script:
    - PLUGINS='dmx-tableview dmx-geomaps dmx-mobile dmx-dita dmx-ldap'
    - WEBCGI='https://download.dmx.systems/cgi-bin/v1/latest-version.cgi?'
    - WEBDIR='https://download.dmx.systems/ci'
    - ZIPFILE='dmx-latest.zip'
    - DEBFULLNAME='GitLab Runner (DMX CI)'
    - DEBEMAIL='Gitlab Runner (DMX CI) <gitlab.runner@dmx.systems>'
    - pwd
    - echo "Starting job ${CI_JOB_ID} in pipeline ${CI_PIPELINE_ID}"
    - wget -q ${WEBDIR}/${ZIPFILE}
    - unzip -q ${ZIPFILE}
    - VERSION="$( ls -d dmx-* | grep -v ${ZIPFILE} | cut -d'-' -f2- )"
    - echo "VERSION=${VERSION}"
    - rm -rf ${DMX}-${VERSION}/bundle/org.apache.felix.gogo.*
    - mkdir -p bin/bin bin/bundle bin/bundle-deploy bin/bundle-available etc/dmx
    - mv ${DMX}-${VERSION}/bin/* bin/bin/
    - mv ${DMX}-${VERSION}/bundle/* bin/bundle/
    - mv ${DMX}-${VERSION}/bundle-deploy/* bin/bundle-deploy/
    - mv ${DMX}-${VERSION}/*.txt ./
    # - mv ${DMX}-${VERSION}/bundle-available/* bin/bundle-available/
    ## add plugins
    - echo -e "About the bundle-available directory" >bin/bundle-available/about-this-directory.txt
    - echo -e "------------------------------------\n" >>bin/bundle-available/about-this-directory.txt
    - echo -e "This directory contains a set of selected DMX plugins.\n" >>bin/bundle-available/about-this-directory.txt
    - echo -e "To activate a plugin copy or link it to the bundles-deploy folder.\n" >>bin/bundle-available/about-this-directory.txt
    - echo -e "Find more information on DMX plugins at" >>bin/bundle-available/about-this-directory.txt
    - echo -e "https://git.dmx.systems/dmx-plugins" >>bin/bundle-available/about-this-directory.txt
    - echo "Installing plugins: ${PLUGINS[@]}"
    - for plugin in "${PLUGINS[@]}"; do latest_version="$( wget -q -O - ${WEBCGI}/ci/${plugin}/${plugin}-latest.jar )"; echo "adding ${latest_version}"; wget -q ${latest_version} -P bin/bundle-available/; done
    ## adjust config
    - CONFIG=$(<${DMX}-${VERSION}/conf/config.properties)
    - CONFIG=${CONFIG/dmx.security.anonymous_read_allowed = ALL/dmx.security.anonymous_read_allowed = NONE}
    - CONFIG=${CONFIG/dmx.security.initial_admin_password = /dmx.security.initial_admin_password = YOUR_SECRET_PASSWORD_HERE}
    - CONFIG=${CONFIG/dmx.filerepo.path = \//dmx.filerepo.path = \/var\/lib\/dmx\/dmx-filedir}
    - CONFIG=${CONFIG/dmx.filerepo.per_workspace = false/dmx.filerepo.per_workspace = true}
    - CONFIG=${CONFIG/felix.fileinstall.dir = bundle-deploy/felix.fileinstall.dir = \/usr\/share\/dmx\/bundle-deploy}
    - CONFIG=${CONFIG/dmx.database.path = dmx-db/dmx.database.path = \/var\/lib\/dmx\/dmx-db}
    - CONFIG=${CONFIG/java.util.logging.config.file = conf\/logging.properties/java.util.logging.config.file = \/etc\/dmx\/logging.properties}
    - CONFIG=${CONFIG/org.osgi.framework.storage = bundle-cache/org.osgi.framework.storage = \/var\/cache\/dmx\/bundle-cache}
    - echo "${CONFIG}" >etc/dmx/config.properties
    - LOGGING=$(<${DMX}-${VERSION}/conf/logging.properties)
    - LOGGING=${LOGGING/handlers=java.util.logging.ConsoleHandler/\# handlers=java.util.logging.ConsoleHandler}
    - LOGGING=${LOGGING/java.util.logging.ConsoleHandler.level=ALL/\# java.util.logging.ConsoleHandler.level=ALL}
    - LOGGING=${LOGGING/\# handlers=java.util.logging.FileHandler/handlers=java.util.logging.FileHandler}
    # The next line should be removed once jri updated the source from deepamehta.log to dmx.log 
    - LOGGING=${LOGGING/java.util.logging.FileHandler.pattern=deepamehta.log/java.util.logging.FileHandler.pattern=\/var\/log\/dmx\/dmx.log}
    - LOGGING=${LOGGING/java.util.logging.FileHandler.pattern=dmx.log/java.util.logging.FileHandler.pattern=\/var\/log\/dmx\/dmx.log}
    - echo "${LOGGING}" >etc/dmx/logging.properties
    ## add py4dmx example
    - git clone https://git.dmx.systems/dmx-contrib/py4dmx examples/py4dmx
    - rm -rf examples/py4dmx/.git*
    ## patch debian files
    - COPYRIGHT=$(<debian/copyright)
    - echo "${COPYRIGHT/@@NUNC@@/$(date -R)}" >debian/copyright
    - PREINST="$(<debian/preinst)"
    - PREINST=${PREINST/DMVERSION=\'@@VERSION@@\'/DMVERSION=\'${VERSION}\'}
    - echo "${PREINST}" >debian/preinst
    - CONTROL="$(<debian/control)"
    - echo -e "old control file:\n\n${CONTROL}"
    ## To replace all occurrences, use ${parameter//pattern/string}
    - CONTROL=${CONTROL//@@PACKAGENAME@@/${PACKAGENAME}}
    - CONTROL=${CONTROL//@@VERSION@@/${VERSION}}
    - if [ "${PACKAGENAME}" == "dmx" ]; then CONFLICTS='dmx-latest'; fi
    - if [ "${PACKAGENAME}" == "dmx-latest" ]; then CONFLICTS='dmx'; fi
    - CONTROL=${CONTROL/@@CONFLICTS@@/${CONFLICTS}}
    - echo -e "new control file:\n\n${CONTROL}"
    - echo "${CONTROL}" >debian/control
    ## The next two cp commands are relevant when overriding the package name in debian/rules
    - cp debian/dmx.service debian/${PACKAGENAME}.dmx.service
    - cp debian/dmx.logrotate debian/${PACKAGENAME}.dmx.logrotate
    - pwd
    - tree
    - dch --controlmaint --create --package "${PACKAGENAME}" --newversion ${VERSION} --empty
    - dch --controlmaint -v ${VERSION} "A Debian Package for DMX - The Context Machine"
    - dch --controlmaint -v ${VERSION} "DMX is the successor of JÃ¶rg Richter's <jri@deepamehta.de> DeepaMehta project."
    - dch --controlmaint -v ${VERSION} "Thanks to Silke <silke@silkemeyer.net> for the initial work on the debian package."
    - dch --controlmaint -r --distribution "${TARGET}" ignored 
    - LASTCOMMIT="$( git rev-parse HEAD )"
    - git add debian/changelog
    - sleep 1
    - NUNC="$( date -R )"
    - 'git commit --date="${NUNC}" -m"DMX debian package build from ${DMX}-${VERSION} - Build Pipeline ${CI_PIPELINE_ID}" -m"Binaries from ${WEBDIR}/${ZIPFILE}" -m"Thanks: GitLab Team for providing great CI infrastructure!"'
    - git log -1
    - gbp dch --distribution "${TARGET}" --ignore-branch --new-version "${VERSION}-${CI_PIPELINE_ID}" --commit --since=${LASTCOMMIT} --release --spawn-editor=never --full --meta
    # - export GPG_TTY=$(tty) <= moved to .bashrc
    - dpkg-buildpackage -A -us --force-sign -k'gitlab.runner@dmx.systems'
    - tree

test:
  only:
    refs:
      - master
  tags:
    - deb
  stage: test
  script:
    - COMMIT_VERSION="$( cat .git/COMMIT_EDITMSG | cut -d' ' -f4 )"
    - ls -la ../*
    - cat ../${PACKAGENAME}_${COMMIT_VERSION}_all.changes
    - echo "Running test - lintian -i -I --show-overrides ../${PACKAGENAME}_${COMMIT_VERSION}_all.changes"
    - lintian -i -I --show-overrides ../${PACKAGENAME}_${COMMIT_VERSION}_all.changes

deploy:
  only:
    refs:
      - master
  tags:
    - deb
  stage: deploy
  script:
    - LOCALDIR='/home/gitlab-runner/repos'
    - REPODIR='/var/www/download.dmx.systems/repos'
    - echo "removing old packages ..."
    - rm -f ${LOCALDIR}/${TARGET}/${PACKAGENAME}_*.{deb,changes,buildinfo}
    - echo "adding ${PACKAGENAME}_*-${CI_PIPELINE_ID} to ${REPODIR} ..."
    - pwd
    - dput local ../${PACKAGENAME}_*-${CI_PIPELINE_ID}_*.changes
    - sleep 1
    - mini-dinstall --batch
    - sleep 1
    - debc ${REPODIR}/ubuntu/${TARGET}/${PACKAGENAME}_*-${CI_PIPELINE_ID}_all.changes
    - cp ./README ${REPODIR}/
    - echo "cleaning up ..."
    - cd ..
    - WORKDIR="$( pwd )"
    - echo "cleaning up ${WORKDIR}/* ..."
    - find . -type f -name "*${PACKAGENAME}_*" -exec rm -f {} \;
    ## trigger pipeline to re-deploy docker image for dmx demo
    - MY_JOB_TOKEN="$(</home/gitlab-runner/.after-deb-repo.token)"
    - TRIGGER="$(curl --silent --write-out '%{http_code}' --output /dev/null --request POST --form token="${MY_JOB_TOKEN}" --form ref=master https://git.dmx.systems/api/v4/projects/17/trigger/pipeline)"
    - echo "${TRIGGER}"
    - if [ ${TRIGGER} -ne 201 ]; then echo "Failed to trigger subsequent project."; exit 1; fi
