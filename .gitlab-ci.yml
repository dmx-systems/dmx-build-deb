stages:
  - build
  - test
  - deploy

build:
  tags:
    - deb
  stage: build
  script:
    - pwd
    - DMX='dmx'
    - VERSION='5.0-SNAPSHOT'
    - DEBFULLNAME='GitLab Runner'
    - DEBEMAIL='Gitlab Runner (DMX CI) <gitlab.runner@dmx.systems>'
    - echo "Starting job ${CI_JOB_ID} in pipeline ${CI_PIPELINE_ID}"
    - wget -q https://download.dmx.systems/ci/dmx-latest.zip
    - unzip -q dmx-latest.zip
    - rm -rf ${DMX}-${VERSION}/bundle/org.apache.felix.gogo.*
    - mkdir bin/bin bin/bundle \bin/bundle-deploy bin/bundle-available
    ## These Plugins are outdated and need to be updated at some point
    - wget -q http://download.deepamehta.de/dm48-images-0.9.10.jar -P bin/bundle-available
    #- wget -q http://download.deepamehta.de/dm48-websockets-0.4.jar -P bin/bundle-available
    #- wget -q http://download.deepamehta.de/dm48-thymeleaf-0.6.1.jar -P bin/bundle-available
    #- wget -q http://download.deepamehta.de/dm48-sign-up-1.5.2.jar -P bin/bundle-available
    #- wget -q http://download.deepamehta.de/dm48-littlehelpers-0.3.0.jar -P bin/bundle-available
    #- wget -q http://download.deepamehta.de/dm48-import-export-0.5.jar -P bin/bundle-available
    #- wget -q http://github.com/junes/py4dmx/archive/master.zip -O examples/py4dmx.zip
    - mv ${DMX}-${VERSION}/bin/* bin/bin/
    - mv ${DMX}-${VERSION}/bundle/${DMX}-* bin/bundle-deploy/
    - mv ${DMX}-${VERSION}/bundle/* bin/bundle/
    - mv ${DMX}-${VERSION}/*.txt ./
    - mkdir etc/deepamehta
    - CONFIG=$(<${DMX}-${VERSION}/conf/config.properties)
    - CONFIG=${CONFIG/dmx.security.anonymous_read_allowed = ALL/dmx.security.anonymous_read_allowed = NONE}
    - CONFIG=${CONFIG/dmx.security.initial_admin_password = /dmx.security.initial_admin_password = YOUR_SECRET_PASSWORD_HERE}
    - CONFIG=${CONFIG/dmx.filerepo.path = \//dmx.filerepo.path = \/var\/lib\/deepamehta\/deepamehta-filedir}
    - CONFIG=${CONFIG/dmx.filerepo.per_workspace = false/dmx.filerepo.per_workspace = true}
    - CONFIG=${CONFIG/felix.fileinstall.dir = bundle-deploy/felix.fileinstall.dir = \/usr\/share\/deepamehta\/bundle-deploy}
    - CONFIG=${CONFIG/dmx.database.path = deepamehta-db/dmx.database.path = \/var\/lib\/deepamehta\/deepamehta-db}
    - CONFIG=${CONFIG/java.util.logging.config.file = conf\/logging.properties/java.util.logging.config.file = \/etc\/deepamehta\/deepamehta-logging.conf}
    - CONFIG=${CONFIG/org.osgi.framework.storage = bundle-cache/org.osgi.framework.storage = \/var\/cache\/deepamehta\/deepamehta-bundle-cache}
    - echo "${CONFIG}" >etc/deepamehta/deepamehta.conf
    - LOGGING=$(<${DMX}-${VERSION}/conf/logging.properties)
    - LOGGING=${LOGGING/handlers=java.util.logging.ConsoleHandler/\# handlers=java.util.logging.ConsoleHandler}
    - LOGGING=${LOGGING/java.util.logging.ConsoleHandler.level=ALL/\# java.util.logging.ConsoleHandler.level=ALL}
    - LOGGING=${LOGGING/\# handlers=java.util.logging.FileHandler/handlers=java.util.logging.FileHandler}
    - LOGGING=${LOGGING/java.util.logging.FileHandler.pattern=deepamehta.log/java.util.logging.FileHandler.pattern=\/var\/log\/deepamehta\/deepamehta.log}
    - echo "${LOGGING}" >etc/deepamehta/deepamehta-logging.conf
    - COPYRIGHT=$(<debian/copyright)
    - echo "${COPYRIGHT/@@NUNC@@/$(date -R)}" >debian/copyright
    - PREINST="$(<debian/preinst)"
    - PREINST=${PREINST/DMVERSION=\'@@VERSION@@\'/DMVERSION=\'${VERSION}\'}
    - echo "${PREINST}" >debian/preinst
    - pwd
    - dch --bin-nmu "DMX debian package build from ${DMX}-${VERSION}."
    - gbp dch --ignore-branch --auto --new-version "${VERSION}-${CI_PIPELINE_ID}" --git-author --release --commit --spawn-editor=never
    - dpkg-buildpackage -A -us --force-sign -k'671B7719' 
    - echo "${VERSION}"
    - echo "${VERSION}" >version

test:
  tags:
    - deb
  stage: test

  script:
    - VERSION='5.0-SNAPSHOT'
    - pwd
    - echo "Running test - lintian -i -I --show-overrides ../deepamehta_${VERSION}-${CI_PIPELINE_ID}_all.changes"
    - lintian -i -I --show-overrides ../deepamehta_${VERSION}-${CI_PIPELINE_ID}_all.changes

deploy:
  tags:
    - deb
  stage: deploy
  script:
    - VERSION='5.0-SNAPSHOT'
    - TARGET="$(lsb_release -sc)"
    - REPODIR='/var/www/download.dmx.systems/repos'  
    - pwd
    - mv ../deepamehta_${VERSION}-${CI_PIPELINE_ID}_* ${REPODIR}/ubuntu/mini-dinstall/incoming/
    - mini-dinstall --batch
    - debc ${REPODIR}/ubuntu/${TARGET}/deepamehta_${VERSION}-${CI_PIPELINE_ID}_all.changes
    # trigger pipeline to re-deploy docker image for dmx demo
    - MY_JOB_TOKEN="$(</home/gitlab-runner/.after-deb-repo.token)"
    - curl --request POST --form token="${MY_JOB_TOKEN}" --form ref=master https://git.dmx.systems/api/v4/projects/17/trigger/pipeline
    