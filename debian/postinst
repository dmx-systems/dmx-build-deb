#!/bin/sh
# postinst script for dmx
#
# see: dh_installdeb(1)

set -e

echo "Running $0 $1 ..." >&2

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

## Source debconf library.
. /usr/share/debconf/confmodule

## Load dmx config file, if it exists.
##
## THIS DOES NOT WORK, BECAUSE DMX VARS CONTAIN '.'s.
## if [ -e $CONFIGFILE ]; then
##    . $CONFIGFILE || true
## fi

## FIXME
## various dirs can be configured via config.properties
## the script should reflect this.

case "$1" in
    configure)
    ## Change password only on initial installation
    if [ -z "$2" ]; then
        ## Get password from debconf-db
        db_get dmx/initial_admin_password || true
        INITIAL_ADMIN_PASSWORD="$RET"
        CONFIGFILE='/etc/dmx/config.properties'
        sed -i "s/^ *dmx\.security\.initial_admin_password =.*/dmx\.security\.initial_admin_password = $INITIAL_ADMIN_PASSWORD/" $CONFIGFILE || true
        db_clear dmx/initial_admin_password || true
        db_clear dmx/initial_admin_password_again || true
    fi

    ### Start: Update plugin symlinks
    LINKDIR='/usr/share/dmx/bundle-deploy'
    FILEDIR='/usr/share/dmx/bundle-available'

    ## Create plugin backup dir
    if [ ! -d "${FILEDIR}/.~outdated~" ]; then
        mkdir "${FILEDIR}/.~outdated~"
    fi

    ## Remove conflicting older plugins
    if [ -L ${LINKDIR}/dmx-tableview-command-latest.jar ]; then
        rm ${LINKDIR}/dmx-tableview-command-latest.jar
    fi
    if [ -f ${LINKDIR}/dmx-tableview-command-latest.jar ]; then
        mv ${LINKDIR}/dmx-tableview-command-latest.jar "${FILEDIR}/.~outdated~/"
    fi
    if [ -f ${FILEDIR}/dmx-tableview-command-latest.jar ]; then
        mv ${FILEDIR}/dmx-tableview-command-latest.jar "${FILEDIR}/.~outdated~/"
    fi
    if [ -L ${LINKDIR}/dmx-tableview-command-1.3.0.jar ]; then
        rm ${LINKDIR}/dmx-tableview-command-1.3.0.jar
    fi
    if [ -f ${LINKDIR}/dmx-tableview-command-1.3.0.jar ]; then
        mv ${LINKDIR}/dmx-tableview-command-1.3.0.jar "${FILEDIR}/.~outdated~/"
    fi
    if [ -f ${FILEDIR}/dmx-tableview-command-1.3.0.jar ]; then
        mv ${FILEDIR}/dmx-tableview-command-1.3.0.jar "${FILEDIR}/.~outdated~/"
    fi

    ## Check if there are any files instead of links in $LINKDIR
    PLUGINFILES="$(find "${LINKDIR}/" -maxdepth 1 -name "*.jar" -type f)"
    for pf in ${PLUGINFILES}; do
        ## Extract plugin name
        filename="$(basename -- "${pf}")"
        plugin="$(echo "${filename%.*}" | sed 's/\-latest//g' | sed -e 's/\-[0-9].*$//g' | sed 's/\-v$//g'| sed 's/\.v$//g' | sed 's/\-$//g' | sed 's/\.$//g')"
        ## make sure latest file exists in FILEDIR
        cp -u "${pf}" "${FILEDIR}/"
        ## delete file in linkdir
        rm "${pf}"
        ## find latest file in filedir
        latestfile="$(ls -rv "${FILEDIR}/${plugin}"*.jar | head -n1)"
        ## update symlink in linkdir
        linkname="$(basename -- "${latestfile}")"
        if [ ! -L "${LINKDIR}/${linkname}" ]; then
            ln -s "${latestfile}" "${LINKDIR}/${linkname}"
        fi
    done

    ## Get rid of pluginname-latest.jar files without version number
    ## The whole *-latest.jar should be removed, once they have all been terminated
    ##
    ## Step one: find -latest links in ${LINKDIR}
    PLUGINFILES="$(find "${LINKDIR}/" -maxdepth 1 -name "*-latest.jar" -type l)"
    for pf in ${PLUGINFILES}; do
        ## Extract filename
        filename="$(basename -- "${pf}")"
        plugin="$(echo "${filename%.*}" | sed 's/\-latest//g' | sed -e 's/\-[0-9].*$//g' | sed 's/\-v$//g'| sed 's/\.v$//g' | sed 's/\-$//g' | sed 's/\.$//g')"
        ## find latest versioned file in filedir
        latestfile="$(ls -rv "${FILEDIR}/${plugin}"*.jar | grep -v '\-latest\.jar' | head -n1)"
        if [ -f "${latestfile}" ]; then
            plugin_version="$(basename -- "${latestfile}")"
            rm "${LINKDIR}/${filename}"
            ln -s "${latestfile}" "${LINKDIR}/${plugin_version}"
        fi
    done
    ## Step two: find -latest files in ${FILEDIR}
    PLUGINFILES="$(find "${FILEDIR}/" -maxdepth 1 -name "*-latest.jar" -type f)"
    for pf in ${PLUGINFILES}; do
        ## Extract plugin name
        filename="$(basename -- "${pf}")"
        plugin="$(echo "${filename%.*}" | sed 's/\-latest//g' | sed -e 's/\-[0-9].*$//g' | sed 's/\-v$//g'| sed 's/\.v$//g' | sed 's/\-$//g' | sed 's/\.$//g')"
        ## find latest versioned file in filedir
        latestfile="$(ls -rv "${FILEDIR}/${plugin}"*.jar | grep -v '\-latest\.jar' | head -n1)"
        if [ -f "${latestfile}" ]; then
            mv "${FILEDIR}/${filename}" "${FILEDIR}/.~outdated~/"
        fi
    done

    ## Check if SNAPSHOT versions exist for released plugins
    PLUGINFILES="$(find "${LINKDIR}/" -maxdepth 1 -name "*-SNAPSHOT*.jar" -type l)"
    for pf in ${PLUGINFILES}; do
        ## Extract plugin name
        filename="$(basename -- "${pf}")"
        plugin="$(echo "${filename%.*}" | sed -e 's/\-[0-9].*$//g' | sed 's/\-v$//g'| sed 's/\.v$//g' | sed 's/\-$//g' | sed 's/\.$//g')"
        ## find latest versioned file in filedir
        latestfile="$(ls -rv "${FILEDIR}/${plugin}"*.jar | grep -v '\-SNAPSHOT' | head -n1)"
        if [ -f "${latestfile}" ]; then
            ## check if latest plugin release fits to SNAPSHOT version
            plugin_version="$( basename -- "${latestfile}" .jar )"
            if [ "$( echo "${pf}" | grep "${plugin_version}" )" ]; then
                mv "${FILEDIR}/${filename}" "${FILEDIR}/.~outdated~/"
                rm "${pf}"
                ln -s "${latestfile}" "${LINKDIR}/${plugin_version}.jar"
            fi
        fi
    done

    ## Remove old plugin files
    OLDFILES="$(find "${FILEDIR}/" -maxdepth 1 -name "*.jar" -type f)"
    for of in ${OLDFILES}; do
        ## extract plugin name
        filename="$(basename -- "${of}")"
        plugin="$(echo "${filename%.*}" | sed 's/\-latest//g' | sed -e 's/\-[0-9].*$//g' | sed 's/\-v$//g'| sed 's/\.v$//g' | sed 's/\-$//g' | sed 's/\.$//g')"
        ## find latest file in filedir
        latestfile="$(ls -rv "${FILEDIR}/${plugin}"*.jar | head -n1)"
        if [ "${of}" != "${latestfile}" ]; then
            mv "${of}" "${FILEDIR}/.~outdated~/${filename}"
        fi
    done

    ## Update plugin symlinks
    SYMLINKS="$(find "${LINKDIR}/" -maxdepth 1 -name "*.jar" -type l)"      # use l for symlinks
    for sl in ${SYMLINKS}; do
        ## extract plugin name
        filename="$(basename -- "${sl}")"
        plugin="$(echo "${filename%.*}" | sed 's/-latest//g' | sed -e 's/\-[0-9].*$//g' | sed 's/\-v$//g'| sed 's/\.v$//g' | sed 's/\-$//g' | sed 's/\.$//g')"
        ## find latest file in filedir
        latestfile="$(ls -rv "${FILEDIR}/${plugin}"*.jar | head -n1)"
        ## update symlink in linkdir
        linkname="$(basename -- "${latestfile}")"
        if [ "${sl}" != "${LINKDIR}/${linkname}" ]; then
            rm "${sl}"
            if [ -L "${LINKDIR}/${linkname}" ]; then
                rm "${LINKDIR}/${linkname}"
            fi
            if [ ! -L "${LINKDIR}/${linkname}" ]; then
                ln -s "${latestfile}" "${LINKDIR}/${linkname}"
            fi
        fi
    done
    ### End: Update plugin symlinks

    ## make sure cache dir exits
    if [ ! -d /var/cache/dmx ]; then
        mkdir /var/cache/dmx
    fi

    ## copy desktop script to user's autostart folder, if it exists
    if [ -d /usr/share/doc/dmx ]; then
        DOCDIR='/usr/share/doc/dmx'
    elif [ -d /usr/share/doc/dmx-latest ]; then
        DOCDIR='/usr/share/doc/dmx-latest'
    else
        DOCDIR=
    fi
    ASDIRS="$(find /home/ -maxdepth 3 -type d -wholename "/home/*/.config/autostart")" || true
    if [ -f ${DOCDIR}/examples/dmx.desktop.autostart ]; then
	for homedir in ${ASDIRS}; do
            username="$(echo ${homedir} | cut -d'/' -f3)"
	    cp ${DOCDIR}/examples/dmx.desktop.autostart ${homedir}/dmx.desktop
            chown ${username}:${username} ${homedir}/dmx.desktop
            chmod 660 ${homedir}/dmx.desktop
	done
    fi
    ## add sudoers.d config if autostart folder (aka desktop) is present
    if [ -n "${ASDIRS}" ] && [ -f ${DOCDIR}/examples/42-systemctl_dmx.sudoers.d ]; then
	cp ${DOCDIR}/examples/42-systemctl_dmx.sudoers.d /etc/sudoers.d/42-systemctl_dmx
	chown root:root /etc/sudoers.d/42-systemctl_dmx
	chmod 440 /etc/sudoers.d/42-systemctl_dmx
    fi

    ## add user
    id -u dmx >/dev/null 2>&1 || useradd --system --user-group --home-dir '/var/lib/dmx' --shell '/bin/false' --comment 'DMX - The Context Machine' dmx >&2
    if [ ! -d /var/lib/dmx ]; then
	mkdir /var/lib/dmx
	#chown dmx:dmx /var/lib/dmx
    fi

    ## set permissions
    chmod 750 /etc/dmx
    chmod 640 /etc/dmx/config.properties
    chmod 640 /etc/dmx/logging.properties
    chmod 750 /var/log/dmx
    chown root:dmx /etc/dmx
    chown root:dmx /etc/dmx/config.properties
    chown root:dmx /etc/dmx/logging.properties
    chown dmx:dmx /var/lib/dmx
    chown dmx:dmx /var/lib/dmx/dmx-db
    chown dmx:dmx /var/lib/dmx/dmx-filedir
    chown dmx:dmx /var/cache/dmx
    chown dmx:dmx /var/log/dmx
    
    ## unmask and enable the service if not enabled
    deb-systemd-helper unmask 'dmx.service' >/dev/null || true
    if [ ! "$(deb-systemd-helper --quiet is-enabled 'dmx.service')" ]; then
        deb-systemd-helper enable 'dmx.service' >/dev/null || true
    fi

    ## reload daemon setup
    if [ -d /run/systemd/system ]; then
        systemctl --system daemon-reload >/dev/null || true
    fi

    ## try to restart DMX if it is running
    if [ "$(systemctl is-active 'dmx.service')" ]; then
	deb-systemd-invoke restart 'dmx.service' >/dev/null || true
    else
	deb-systemd-invoke start 'dmx.service' >/dev/null || true
    fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac



# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
