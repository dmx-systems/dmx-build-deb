#!/bin/sh
# postinst script for dmx
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

CONFIGFILE='/etc/dmx/config.properties'

# Load config file, if it exists.

### THIS DOES NOT WORK, BECAUSE DMX VARS CONTAIN '.'s.
### if [ -e $CONFIGFILE ]; then
###    . $CONFIGFILE || true
### fi

# Source debconf library.
. /usr/share/debconf/confmodule

### FIXME
### various dirs can be configured via config.properties
### the script should reflect this.

case "$1" in
    configure)

    # Change password only on initial installation
    if [ -z "$2" ]; then
        # Get password from debconf-db
        db_get dmx/initial_admin_password
        INITIAL_ADMIN_PASSWORD="$RET"

        cp -a -f $CONFIGFILE $CONFIGFILE.tmp
        sed -e "s/^ *dmx\.security\.initial_admin_password =.*/dmx\.security\.initial_admin_password = $INITIAL_ADMIN_PASSWORD/" \
            < $CONFIGFILE > $CONFIGFILE.tmp
        mv -f $CONFIGFILE.tmp $CONFIGFILE
        db_clear
        echo "Successfuly changed dmx.security.initial_admin_password in /etc/dmx/config.properties."
    fi

    ### Start: Update plugin symlinks
    LINKDIR='/usr/share/dmx/bundle-deploy'
    FILEDIR='/usr/share/dmx/bundle-available'

    # Check if there are any files instead of links in $LINKDIR
    PLUGINFILES="$(find "${LINKDIR}/" -name "*.jar" -maxdepth 1 -type f)"
    for pf in ${PLUGINFILES}; do
        ## echo ""
        # Extract filename
        ## echo "<File: $(file ${pf})>"
        filename="$(basename -- "${pf}")"
        plugin="${filename%.*}"
        plugin="$(echo "${plugin}" | sed -e 's/[0-9].*$//g' | sed 's/\-v$//g'| sed 's/\.v$//g' | sed 's/\-$//g' | sed 's/\.$//g')"
        ## echo "<Filename: ${filename}>"
        ## echo "<Plugin: ${plugin}>"
        # make sure latest file exists in FILEDIR
        cp -u "${pf}" "${FILEDIR}/"
        # find latest file in filedir
        latestfile="$(ls -rv "${FILEDIR}/${plugin}"*.jar | head -n1)"
        ## echo "<Latest file: ${latestfile}>"
        # update symlink in linkdir
        linkname="$(basename -- "${latestfile}")"
        ## echo "<Linkname: ${linkname}>"
        if [ -f "${LINKDIR}/${linkname}" ]; then
            rm "${pf}"
        fi
        if [ ! -L "${LINKDIR}/${linkname}" ]; then
            ln -s "${latestfile}" "${LINKDIR}/${linkname}"
        fi
        ## echo "<New link: $(file ${LINKDIR}/${linkname})>"
        # make sure targetdir is up to date
        # sleep .1
        # ls -la "${LINKDIR}/" >>/dev/null
    done

    # Remove old files
    OLDFILES="$(find "${FILEDIR}/" -name "*.jar" -maxdepth 1 -type f)"
    for of in ${OLDFILES}; do
        ## echo ""
        # extract filename
        ## echo "<Oldfile: $(file ${of})>"
        filename="$(basename -- "${of}")"
        plugin="${filename%.*}"
        plugin="$(echo "${plugin}" | sed -e 's/[0-9].*$//g' | sed 's/\-v$//g'| sed 's/\.v$//g' | sed 's/\-$//g' | sed 's/\.$//g')"
        ## echo "<Filename: ${filename}>"
        ## echo "<Plugin: ${plugin}>"
        # find latest file in filedir
        latestfile="$(ls -rv "${FILEDIR}/${plugin}"*.jar | head -n1)"
        ## echo "<Latest file: ${latestfile}>"
        if [ "${of}" != "${latestfile}" ]; then
            # create backup dir if missing
            if [ ! -d "${FILEDIR}/.~outdated~" ]; then
                mkdir "${FILEDIR}/.~outdated~"
            fi
            mv "${of}" "${FILEDIR}/.~outdated~/${filename}"
            ## echo "Moved ${of}" to "${FILEDIR}/.~outdated~/${filename}"
        fi
    done

    # Update symlinks
    SYMLINKS="$(find "${LINKDIR}/" -name "*.jar" -maxdepth 1 -type l)"      # use l for symlinks
    for sl in ${SYMLINKS}; do
        ## echo ""
        # extract filename
        ## echo "<Old link: $(file ${sl})>"
        filename="$(basename -- "${sl}")"
        plugin="${filename%.*}"
        plugin="$(echo "${plugin}" | sed -e 's/[0-9].*$//g' | sed 's/\-v$//g'| sed 's/\.v$//g' | sed 's/\-$//g' | sed 's/\.$//g')"
        ## echo "<Filename: ${filename}>"
        ## echo "<Plugin: ${plugin}>"
        # find latest file in filedir
        latestfile="$(ls -rv "${FILEDIR}/${plugin}"*.jar | head -n1)"
        ## echo "<Latest file: ${latestfile}>"
        # update symlink in linkdir
        linkname="$(basename -- "${latestfile}")"
        ## echo "<Linkname: ${linkname}>"
        if [ "${sl}" != "${LINKDIR}/${linkname}" ]; then
            rm "${sl}"
            if [ -L "${LINKDIR}/${linkname}" ]; then
                rm "${LINKDIR}/${linkname}"
            fi
            if [ ! -L "${LINKDIR}/${linkname}" ]; then
                ln -s "${latestfile}" "${LINKDIR}/${linkname}"
            fi
            ## echo "<New link: $(file ${LINKDIR}/${linkname})>"
        fi
    done

    ### End: Update plugin symlinks

    # Set permissions
    chmod 750 /etc/dmx
    chmod 640 /etc/dmx/*
    chmod 750 /var/log/dmx
    chown -R root:dmx /etc/dmx
    chown -R dmx:dmx /var/lib/dmx
    chown -R dmx:dmx /var/cache/dmx
    chown -R dmx:dmx /var/log/dmx
    
    # enable the service if not enabled
    if [ "$(systemctl is-enabled dmx.service)" = "masked" ]; then
        ## echo "INFO: Service is masked."
        deb-systemd-invoke unmask dmx.service >/dev/null || true
    fi
    if [ ! "$(systemctl is-enabled dmx.service)" ]; then
        ## echo "INFO: Service is not enabled."
        deb-systemd-invoke enable dmx.service >/dev/null || true
    fi
    # try to restart DMX if it is running
    if [ "$(systemctl is-active dmx.service)" ]; then
	deb-systemd-invoke restart dmx.service >/dev/null || true
    fi
    ;;
    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
