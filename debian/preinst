#!/bin/sh
# preinst script for dmx
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <new-preinst> `install'
#        * <new-preinst> `install' <old-version>
#        * <new-preinst> `upgrade' <old-version>
#        * <old-preinst> `abort-upgrade' <new-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

## Source debconf library.
. /usr/share/debconf/confmodule

## Get the name of the package
PACKAGE="${DPKG_MAINTSCRIPT_PACKAGE}"
DMVERSION='@@VERSION@@'
echo "Installing ${PACKAGE} version ${DMVERSION}."

## Is this the headless package?
HEADLESS_PACKAGE="$( echo "${PACKAGE}" | grep 'headless' )"

## Is this a desktop system?
SOCKET_STATUS="$( netstat -lp 2>/dev/null | grep -E 'Xorg|Xwayland' | grep 'X11' )"
PROCESS_STATUS="$( pgrep 'Xorg|Xwayland' )"
if [ -z "${SOCKET_STATUS}" ] && [ -z "${PROCESS_STATUS}" ] && [ -n "${HEADLESS_PACKAGE}" ]; then
    ## prompt headless warning
    db_input high dmx/headless_warning || true
    db_input high dmx/continue_installation || true
    db_go
    db_get dmx/continue_installation
    #  echo "<$RET>"
    if [ "$RET" != "true" ]; then
        ## Remove my changes to the db.
        echo "Aborting installation."
        db_purge
        ## Abort installation
        ## IMPORTANT: exit 0 will not cancel the installation process,
        ## but only exit from preinst and continue with installation.
        exit 1
    fi
fi


###  FIXME
###  Backing up the db depends on the location of the db, which is a config parameter in config properties.
###  So in the funture we have to read that!
DBDIR='/var/lib/dmx/dmx-db'
BACKUPDATE="$( date +%F-%H:%M:%S )"

## was there a previously installed DMX
INSTALLED_VERSION="$( dpkg -s ${PACKAGE} 2>/dev/null | sed -n 's/^Version: //p' | cut -d'~' -f1 )"
PREVIOUSDBVERSION="$( if [ -d ${DBDIR} ]; then find ${DBDIR} -name ".dm-version.*" | cut -d'.' -f'3-' | sort -V | tail -n1; fi )"


if [ -n "${PREVIOUSDBVERSION}" ]; then
    echo "Found previous db-version ${PREVIOUSDBVERSION}."
fi

## check if dmx is already running and stop it then
systemctl is-active --quiet dmx.service && deb-systemd-invoke stop dmx

case "$1" in
    install)
    id -u dmx >/dev/null 2>&1 || useradd --system --user-group --home-dir '/var/lib/dmx' --shell '/bin/false' --comment 'DMX - The Context Machine' dmx
    if [ ! -d /var/lib/dmx ]; then
	mkdir /var/lib/dmx
	chown dmx:dmx /var/lib/dmx
    fi
    ## backup existing database
    if [ -d ${DBDIR} ]; then
        if [ -n "${PREVIOUSDBVERSION}" ]; then
            BACKUPDIR="${DBDIR}-${PREVIOUSDBVERSION}-backup-$BACKUPDATE"
        else
            BACKUPDIR="${DBDIR}-preinst_${DMVERSION}-backup-$BACKUPDATE"
        fi
        cp -a ${DBDIR} ${BACKUPDIR}
	echo "Your existing database has been backed-up (copied) to ${BACKUPDIR}."
    else
        mkdir ${DBDIR}
    fi
    chown dmx:dmx ${DBDIR}
    chmod 750 ${DBDIR}
    touch ${DBDIR}/.dm-version.$DMVERSION
    if [ -d /etc/dmx ]; then
	    chown root:dmx /etc/dmx
	    chmod 750 /etc/dmx
    fi
    ;;

    upgrade)
    ## backup existing database
    if [ -d ${DBDIR} ]; then
        if [ -n "${PREVIOUSDBVERSION}" ]; then
            BACKUPDIR="${DBDIR}-${PREVIOUSDBVERSION}-backup-$BACKUPDATE"
        elif [ -n "${INSTALLED_VERSION}" ]; then
            BACKUPDIR="${DBDIR}-${INSTALLEDDBVERSION}-backup-$BACKUPDATE"
        else
            BACKUPDIR="${DBDIR}-preinst_${DMVERSION}-backup-$BACKUPDATE"
        fi
        cp -a ${DBDIR} ${BACKUPDIR}
	echo "Your existing database has been backed-up (copied) to ${BACKUPDIR}."
        touch ${DBDIR}/.dm-version.$DMVERSION
        touch ${DBDIR}/.dm-version.$DMVERSION
    fi
    ;;

    abort-upgrade)
    ;;

    *)
        echo "preinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
